{
 "metadata": {
  "name": "",
  "signature": "sha256:731f9b93fc02077531d0b4cbe6e556c330b79aca8a6c6982cc833ff3677ed27c"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**CS109 Project: Eigenfactors**"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "import numpy as np\n",
      "import pandas as pd\n",
      "import json\n",
      "from collections import Counter"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 171
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Read in file 1 to parse\n",
      "data = []\n",
      "with open('medline14n0001.txt') as f:\n",
      "    for line in f:\n",
      "        data.append(json.loads(line))\n",
      "        \n",
      "# Read in file 2 to parse\n",
      "data2 = []\n",
      "with open('medline14n0002.txt') as f:\n",
      "    for line in f:\n",
      "        data2.append(json.loads(line))\n",
      "\n",
      "# Read in file 3\n",
      "data3 = []\n",
      "with open('medline14n0003.txt') as f:\n",
      "    for line in f:\n",
      "        data3.append(json.loads(line))\n",
      "        \n",
      "# Read in file 4\n",
      "data4 = []\n",
      "with open('medline14n0064.txt') as f:\n",
      "    for line in f:\n",
      "        data4.append(json.loads(line))\n",
      "\n",
      "# Read in file 5\n",
      "data5 = []\n",
      "with open('medline14n0127.txt') as f:\n",
      "    for line in f:\n",
      "        data5.append(json.loads(line))\n",
      "\n",
      "# Read in file 6\n",
      "data6 = []\n",
      "with open('medline14n0189.txt') as f:\n",
      "    for line in f:\n",
      "        data6.append(json.loads(line))\n",
      "\n",
      "# Read in file 7\n",
      "data7 = []\n",
      "with open('medline14n0251.txt') as f:\n",
      "    for line in f:\n",
      "        data7.append(json.loads(line))\n",
      "\n",
      "# Read in file 8\n",
      "data8 = []\n",
      "with open('medline14n0375.txt') as f:\n",
      "    for line in f:\n",
      "        data8.append(json.loads(line))\n",
      "\n",
      "# Read in file 9\n",
      "data9 = []\n",
      "with open('medline14n0437.txt') as f:\n",
      "    for line in f:\n",
      "        data9.append(json.loads(line))\n",
      "        \n",
      "# Read in file 10\n",
      "data10 = []\n",
      "with open('medline14n0561.txt') as f:\n",
      "    for line in f:\n",
      "        data10.append(json.loads(line))\n",
      "\n",
      "# Read in file 11\n",
      "data11= []\n",
      "with open('medline14n0623.txt') as f:\n",
      "    for line in f:\n",
      "        data11.append(json.loads(line))\n",
      "\n",
      "# Read in file 12\n",
      "data12= []\n",
      "with open('medline14n0685.txt') as f:\n",
      "    for line in f:\n",
      "        data12.append(json.loads(line))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 118
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "master = data+data2+data3+data4+data5+data6+data7+data8+data9+data10+data11+data12"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 128
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "len(master)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 129,
       "text": [
        "360012"
       ]
      }
     ],
     "prompt_number": 129
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "master[200000]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 132,
       "text": [
        "{u'authors': [{u'affiliation': u'',\n",
        "   u'forename': u'E G',\n",
        "   u'initials': u'EG',\n",
        "   u'lastname': u'Matiakin'}],\n",
        " u'date': {u'day': u'', u'month': u'', u'year': u''},\n",
        " u'entryid': u'medline14n0251.xml.gz:19994',\n",
        " u'journal': {u'country': u'USSR',\n",
        "  u'issnlinking': u'0507-3758',\n",
        "  u'medlineta': u'Vopr Onkol',\n",
        "  u'nlmuniqueid': u'0413775'}}"
       ]
      }
     ],
     "prompt_number": 132
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df = pd.DataFrame(data, columns=['authors', 'journal'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 35
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df['authors'][0][0]['forename'] + \" \" + df['authors'][0][0]['lastname']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 57,
       "text": [
        "u'J S Hildreth'"
       ]
      }
     ],
     "prompt_number": 57
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "data[3000]['journal name'] = \"American Journal of Public Health\"\n",
      "data[3000]['EF'] = 0.052743"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 61
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# for matching journal abbreviations, append the full journal name\n",
      "if str(data[0]['journal']['medlineta']) == 'Trans Am Ophthalmol Soc':\n",
      "    data[0]['journal name'] = \"Transactions of the American Ophthalmological Society\"\n",
      "    data[0]['EF'] = 0"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 75
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Template code\n",
      "if str(data[i]['journal']['medlineta']) == '':\n",
      "        data[i]['journal name'] = ''\n",
      "        data[i]['EF'] = "
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "for i in range(len(data)-1):\n",
      "\n",
      "    # \"American Journal of Public Health\"\n",
      "    if str(data[i]['journal']['medlineta']) == 'Public Health Pap Rep':\n",
      "        data[i]['journal name'] = 'American Journal of Public Health'\n",
      "        data[i]['EF'] = 0.053   \n",
      "    \n",
      "    # Trans Am Ophthalmol Soc\n",
      "    elif str(data[i]['journal']['medlineta']) == 'Trans Am Ophthalmol Soc':\n",
      "        data[i]['journal name'] = 'Transactions of the American Ophthalmological Society'\n",
      "        data[i]['EF'] = 'NA'\n",
      "        \n",
      "    # append journal name and eigenfactor score - \"Journal of Anatomy\"\n",
      "    elif str(data[i]['journal']['medlineta']) == 'J Anat Physiol':\n",
      "        data[i]['journal name'] = \"Journal of Anatomy\"\n",
      "        data[i]['EF'] = 0.011\n",
      "    \n",
      "    # J Physiol\n",
      "    elif str(data[i]['journal']['medlineta']) == 'J Physiol':\n",
      "        data[i]['journal name'] = 'The Journal of Physiology'\n",
      "        data[i]['EF'] = 0.07\n",
      "    \n",
      "    # Med Chir Trans\n",
      "    elif str(data[i]['journal']['medlineta']) == 'Med Chir Trans':\n",
      "        data[i]['journal name'] = 'Journal of the Royal Society of Medicine'\n",
      "        data[i]['EF'] = 0.0048\n",
      "\n",
      "    # Ann Surg - Annals of Surgery\n",
      "    elif str(data[i]['journal']['medlineta']) == 'Ann Surg':\n",
      "        data[i]['journal name'] = 'Annals of Surgery'\n",
      "        data[i]['EF'] = 0.07\n",
      "    \n",
      "    # Science  - why is the being applied to others\n",
      "    elif str(data[i]['journal']['medlineta'] == 'Science'):\n",
      "        data[i]['journal name'] = 'Science Magazine'\n",
      "        data[i]['EF'] = 1.41\n",
      "    \n",
      "    # Prov Med Surg J\n",
      "    elif str(data[i]['journal']['medlineta'] == 'Prov Med Surg J'):\n",
      "        data[i]['journal name'] = 'Provincial Medical & Surgical Journal'\n",
      "        data[i]['EF'] = 'NA'\n",
      "    \n",
      "    # Br Med J\n",
      "    elif str(data[i]['journal']['medlineta']) == 'Br Med J':\n",
      "        data[i]['journal name'] = 'British Medical Journal'\n",
      "        data[i]['EF'] = 0.15\n",
      "    \n",
      "    else: pass\n",
      "        \n",
      "    # Journal of the Royal Society of Medicine\n",
      "    #if str()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**Create pandas dataframe of relevant information. columns = 'journal_abbrev, journal_name, EF'**"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df = pd.DataFrame(data, columns= ['journal name', 'EF', 'authors', 'journal'])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 12
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>journal name</th>\n",
        "      <th>EF</th>\n",
        "      <th>authors</th>\n",
        "      <th>journal</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td> Transactions of the American Ophthalmological ...</td>\n",
        "      <td> NA</td>\n",
        "      <td> [{u'affiliation': u'', u'initials': u'JS', u'f...</td>\n",
        "      <td> {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> Transactions of the American Ophthalmological ...</td>\n",
        "      <td> NA</td>\n",
        "      <td> [{u'affiliation': u'', u'initials': u'BJ', u'f...</td>\n",
        "      <td> {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> Transactions of the American Ophthalmological ...</td>\n",
        "      <td> NA</td>\n",
        "      <td> [{u'affiliation': u'', u'initials': u'HD', u'f...</td>\n",
        "      <td> {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> Transactions of the American Ophthalmological ...</td>\n",
        "      <td> NA</td>\n",
        "      <td> [{u'affiliation': u'', u'initials': u'CM', u'f...</td>\n",
        "      <td> {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> Transactions of the American Ophthalmological ...</td>\n",
        "      <td> NA</td>\n",
        "      <td> [{u'affiliation': u'', u'initials': u'E', u'fo...</td>\n",
        "      <td> {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 13,
       "text": [
        "                                        journal name  EF  \\\n",
        "0  Transactions of the American Ophthalmological ...  NA   \n",
        "1  Transactions of the American Ophthalmological ...  NA   \n",
        "2  Transactions of the American Ophthalmological ...  NA   \n",
        "3  Transactions of the American Ophthalmological ...  NA   \n",
        "4  Transactions of the American Ophthalmological ...  NA   \n",
        "\n",
        "                                             authors  \\\n",
        "0  [{u'affiliation': u'', u'initials': u'JS', u'f...   \n",
        "1  [{u'affiliation': u'', u'initials': u'BJ', u'f...   \n",
        "2  [{u'affiliation': u'', u'initials': u'HD', u'f...   \n",
        "3  [{u'affiliation': u'', u'initials': u'CM', u'f...   \n",
        "4  [{u'affiliation': u'', u'initials': u'E', u'fo...   \n",
        "\n",
        "                                             journal  \n",
        "0  {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...  \n",
        "1  {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...  \n",
        "2  {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...  \n",
        "3  {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...  \n",
        "4  {u'medlineta': u'Trans Am Ophthalmol Soc', u'c...  "
       ]
      }
     ],
     "prompt_number": 13
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data1 - Obtain journal abbreviations and return pandas DataFrame of eigenfactors and relevant information"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev = []\n",
      "for i in range(len(data)-1):\n",
      "    x = data[i]['journal']['medlineta']\n",
      "    abbrev.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 401
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Create table - frequency of each journal\n",
      "res = Counter(abbrev)\n",
      "print res"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Counter({'Br Med J': 11583, 'Science': 8390, 'Prov Med Surg J': 1910, 'Med Chir Trans': 1723, 'J Anat Physiol': 1376, 'Prov Med J Retrosp Med Sci': 1054, 'Prov Med Surg J (1840)': 810, 'Ann Surg': 759, 'Assoc Med J': 720, 'Public Health Pap Rep': 711, 'J Physiol': 441, 'Trans Am Ophthalmol Soc': 237, 'Trans Am Climatol Assoc Meet': 130, 'Lond J Med': 106, 'Annu Meet Amer Climatol Assoc': 29, 'J Mass Assoc Boards Health': 21})\n"
       ]
      }
     ],
     "prompt_number": 402
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Generate pandas DataFrame\n",
      "c1 = res.keys()\n",
      "c2 = res.values()\n",
      "\n",
      "df = pd.DataFrame([c1, c2])\n",
      "df = df.T\n",
      "df = df.rename(columns = {0 : 'Journal Abbreviation', 1 : 'Frequency'})\n",
      "df.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>  Public Health Pap Rep</td>\n",
        "      <td>  711</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>              J Physiol</td>\n",
        "      <td>  441</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>            Assoc Med J</td>\n",
        "      <td>  720</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>                Science</td>\n",
        "      <td> 8390</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> Prov Med Surg J (1840)</td>\n",
        "      <td>  810</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 403,
       "text": [
        "     Journal Abbreviation Frequency\n",
        "0   Public Health Pap Rep       711\n",
        "1               J Physiol       441\n",
        "2             Assoc Med J       720\n",
        "3                 Science      8390\n",
        "4  Prov Med Surg J (1840)       810"
       ]
      }
     ],
     "prompt_number": 403
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data2 - Get Journal Abbreviations and return pandas DF of Eigenfactors and relevant info"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Generate list of journal abbreviations\n",
      "abbrev2 = []\n",
      "for i in range(len(data2)-1):\n",
      "    x = data2[i]['journal']['medlineta']\n",
      "    abbrev2.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 404
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev2)\n",
      "res  # count of all unique journal abbreviations in data2\n",
      "unique_abbrev2 = list(set(abbrev2))\n",
      "\n",
      "# Prints item(journal name) and its corresponding frequency(res[item])\n",
      "# for item in unique_abbrev2:\n",
      "#     print \"%s : %d\" % (item, res[item])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 405
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# # using groupby\n",
      "# from itertools import groupby\n",
      "# [len(list(group)) for key, group in groupby(abbrev2)]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 406
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "c1 = res.keys()\n",
      "c2 = res.values()\n",
      "\n",
      "df2 = pd.DataFrame(data=[c1,c2])\n",
      "df2 = df2.T\n",
      "df2 = df2.rename(columns = {0 : 'Journal Abbreviation', 1 : 'Frequency'})\n",
      "df2.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>  Med Library Hist J</td>\n",
        "      <td> 182</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> Bull Assoc Med Libr</td>\n",
        "      <td>  20</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>         Aesculapian</td>\n",
        "      <td>  24</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>        J Hyg (Lond)</td>\n",
        "      <td> 304</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>      Med Chir Trans</td>\n",
        "      <td> 268</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 407,
       "text": [
        "  Journal Abbreviation Frequency\n",
        "0   Med Library Hist J       182\n",
        "1  Bull Assoc Med Libr        20\n",
        "2          Aesculapian        24\n",
        "3         J Hyg (Lond)       304\n",
        "4       Med Chir Trans       268"
       ]
      }
     ],
     "prompt_number": 407
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data3 - Obtain journal abbreviations and return pandas DataFrame of eigenfactors and relevant information"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev3 = []\n",
      "for i in range(len(data3)-1):\n",
      "    x = data3[i]['journal']['medlineta']\n",
      "    abbrev3.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 408
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "unique_abbrev3 = list(set(abbrev3))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 409
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev3)\n",
      "print res"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Counter({'Proc R Soc Med': 6956, 'Science': 4875, 'Br Med J': 4491, 'Cal State J Med': 3218, 'Ann Surg': 1744, 'Am J Public Health (N Y)': 1621, 'Can Med Assoc J': 1117, 'J Exp Med': 960, 'Proc Natl Acad Sci U S A': 713, 'J Natl Med Assoc': 589, 'J Med Res': 530, 'J Physiol': 443, 'Biochem J': 405, 'Br J Ophthalmol': 309, 'Trans Am Ophthalmol Soc': 289, 'J Hyg (Lond)': 270, 'J Anat Physiol': 242, 'Eugen Rev': 204, 'Bull Med Libr Assoc': 178, 'J Bacteriol': 174, 'J Am Public Health Assoc': 152, 'Am J Public Hygiene': 129, 'Trans Am Climatol Assoc': 98, 'Trans Am Climatol Clin Assoc': 93, 'Genetics': 90, 'J Anat': 85, 'J Gen Physiol': 22, 'J Cancer Res': 1, 'Beitr Klin Tuberk Spezif Tuberkuloseforsch': 1, 'Am J Obstet Dis Women Child': 1})\n"
       ]
      }
     ],
     "prompt_number": 410
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "c1 = res.keys()\n",
      "c2 = res.values()\n",
      "\n",
      "df3 = pd.DataFrame(data=[c1,c2])\n",
      "df3 = df3.T\n",
      "df3 = df3.rename(columns = {0: 'Journal Abbreviation', 1:'Frequency'})\n",
      "df3.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>                               J Cancer Res</td>\n",
        "      <td>   1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>                                     J Anat</td>\n",
        "      <td>  85</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>                               J Hyg (Lond)</td>\n",
        "      <td> 270</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>                            Br J Ophthalmol</td>\n",
        "      <td> 309</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> Beitr Klin Tuberk Spezif Tuberkuloseforsch</td>\n",
        "      <td>   1</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 411,
       "text": [
        "                         Journal Abbreviation Frequency\n",
        "0                                J Cancer Res         1\n",
        "1                                      J Anat        85\n",
        "2                                J Hyg (Lond)       270\n",
        "3                             Br J Ophthalmol       309\n",
        "4  Beitr Klin Tuberk Spezif Tuberkuloseforsch         1"
       ]
      }
     ],
     "prompt_number": 411
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data4 - Obtain Journal abbreviations. Return dataframe of abbreviations, eigenfactor, and other relevant information."
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev4 = []\n",
      "for i in range(len(data4)-1):\n",
      "    x = data4[i]['journal']['medlineta']\n",
      "    abbrev4.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 412
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev4)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 413
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Create pandas df\n",
      "df4 = pd.DataFrame(data=[c1,c2])\n",
      "df4 = df4.T\n",
      "df4 = df4.rename(columns = {0: 'Journal Abbreviation', 1: 'Frequency'})\n",
      "df4.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>         Bull Am Coll Surg</td>\n",
        "      <td>  1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>                  Mod Hosp</td>\n",
        "      <td> 65</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>              Arztl Forsch</td>\n",
        "      <td> 20</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> Z Zellforsch Mikrosk Anat</td>\n",
        "      <td> 40</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>       Arch Patol Clin Med</td>\n",
        "      <td>  5</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 414,
       "text": [
        "        Journal Abbreviation Frequency\n",
        "0          Bull Am Coll Surg         1\n",
        "1                   Mod Hosp        65\n",
        "2               Arztl Forsch        20\n",
        "3  Z Zellforsch Mikrosk Anat        40\n",
        "4        Arch Patol Clin Med         5"
       ]
      }
     ],
     "prompt_number": 414
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data5 - Obtain Eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev5 = []\n",
      "for i in range(len(data5)-1):\n",
      "    x = data5[i]['journal']['medlineta']\n",
      "    abbrev5.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 415
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev5)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 416
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df5 = pd.DataFrame(data=[c1,c2])\n",
      "df5 = df5.T\n",
      "df5 = df5.rename(columns = {0: \"Journal Abbreviation\", 1: \"Frequency\"})\n",
      "df5.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>              Stud Fam Plann</td>\n",
        "      <td>  4</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>                 Ftiziologia</td>\n",
        "      <td> 22</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>                    Med Tekh</td>\n",
        "      <td> 59</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> Mod Concepts Cardiovasc Dis</td>\n",
        "      <td>  1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>                   FEBS Lett</td>\n",
        "      <td> 40</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 417,
       "text": [
        "          Journal Abbreviation Frequency\n",
        "0               Stud Fam Plann         4\n",
        "1                  Ftiziologia        22\n",
        "2                     Med Tekh        59\n",
        "3  Mod Concepts Cardiovasc Dis         1\n",
        "4                    FEBS Lett        40"
       ]
      }
     ],
     "prompt_number": 417
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data6 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev6 = []\n",
      "for i in range(len(data6)-1):\n",
      "    x = data6[i]['journal']['medlineta']\n",
      "    abbrev6.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 418
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev6)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 419
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df6 = pd.DataFrame(data=[c1,c2])\n",
      "df6 = df6.T\n",
      "df6 = df6.rename(columns={0: 'Journal Abbreviation', 1: 'Frequency'})\n",
      "df6.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>              J Stud Alcohol</td>\n",
        "      <td> 19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>              Stud Fam Plann</td>\n",
        "      <td> 11</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>           J Immunol Methods</td>\n",
        "      <td> 37</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>                  Sogo Kango</td>\n",
        "      <td>  9</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> Mod Concepts Cardiovasc Dis</td>\n",
        "      <td>  4</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 421,
       "text": [
        "          Journal Abbreviation Frequency\n",
        "0               J Stud Alcohol        19\n",
        "1               Stud Fam Plann        11\n",
        "2            J Immunol Methods        37\n",
        "3                   Sogo Kango         9\n",
        "4  Mod Concepts Cardiovasc Dis         4"
       ]
      }
     ],
     "prompt_number": 421
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data7 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev7 = []\n",
      "for i in range(len(data7)-1):\n",
      "    x = data7[i]['journal']['medlineta']\n",
      "    abbrev7.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 422
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev7)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 423
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df7 = pd.DataFrame(data=[c1,c2])\n",
      "df7 = df7.T\n",
      "df7 = df7.rename(columns={0: 'Journal Abbreviation', 1: 'Frequency'})\n",
      "df7.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>         J Stud Alcohol</td>\n",
        "      <td> 14</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>      J Immunol Methods</td>\n",
        "      <td> 36</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>      Bull Am Coll Surg</td>\n",
        "      <td>  8</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>       Clin Rev Allergy</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> J Toxicol Clin Toxicol</td>\n",
        "      <td>  8</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 425,
       "text": [
        "     Journal Abbreviation Frequency\n",
        "0          J Stud Alcohol        14\n",
        "1       J Immunol Methods        36\n",
        "2       Bull Am Coll Surg         8\n",
        "3        Clin Rev Allergy         6\n",
        "4  J Toxicol Clin Toxicol         8"
       ]
      }
     ],
     "prompt_number": 425
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data8 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev8 = []\n",
      "for i in range(len(data8)-1):\n",
      "    x = data8[i]['journal']['medlineta']\n",
      "    abbrev8.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 427
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res= Counter(abbrev8)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()\n",
      "\n",
      "df8 = pd.DataFrame(data=[c1,c2])\n",
      "df8 = df8.T\n",
      "df8 = df8.rename(columns={0: 'Journal Abbreviation', 1: 'Frequency'})\n",
      "df8.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>    J Stud Alcohol</td>\n",
        "      <td> 12</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>          Oncogene</td>\n",
        "      <td> 29</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>  J Korean Med Sci</td>\n",
        "      <td> 13</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td> Bull Am Coll Surg</td>\n",
        "      <td>  3</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>   Rev Invest Clin</td>\n",
        "      <td> 12</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 428,
       "text": [
        "  Journal Abbreviation Frequency\n",
        "0       J Stud Alcohol        12\n",
        "1             Oncogene        29\n",
        "2     J Korean Med Sci        13\n",
        "3    Bull Am Coll Surg         3\n",
        "4      Rev Invest Clin        12"
       ]
      }
     ],
     "prompt_number": 428
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data9 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev9 = []\n",
      "for i in range(len(data9)-1):\n",
      "    x = data9[i]['journal']['medlineta']\n",
      "    abbrev9.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 429
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev9)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 430
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df9 = pd.DataFrame(data=[c1,c2])\n",
      "df9 = df9.T\n",
      "df9 = df9.rename(columns={0: 'Journal Abbreviation', 1: 'Frequency'})\n",
      "df9.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>               Oncogene</td>\n",
        "      <td> 82</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>               ED Manag</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> J Toxicol Clin Toxicol</td>\n",
        "      <td>  1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>      J Basic Microbiol</td>\n",
        "      <td>  4</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>        Electrophoresis</td>\n",
        "      <td> 32</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 431,
       "text": [
        "     Journal Abbreviation Frequency\n",
        "0                Oncogene        82\n",
        "1                ED Manag         6\n",
        "2  J Toxicol Clin Toxicol         1\n",
        "3       J Basic Microbiol         4\n",
        "4         Electrophoresis        32"
       ]
      }
     ],
     "prompt_number": 431
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data10 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev10 = []\n",
      "for i in range(len(data10)-1):\n",
      "    x = data10[i]['journal']['medlineta']\n",
      "    abbrev10.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 432
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev10)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()\n",
      "\n",
      "df10 = pd.DataFrame(data=[c1,c2])\n",
      "df10 = df10.T\n",
      "df10 = df10.rename(columns={0:'Journal Abbreviation',1:'Frequency'})\n",
      "df10.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>    J Stud Alcohol</td>\n",
        "      <td> 18</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td> School Nurse News</td>\n",
        "      <td> 10</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>          Oncogene</td>\n",
        "      <td> 26</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>     Ecotoxicology</td>\n",
        "      <td>  8</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> J Basic Microbiol</td>\n",
        "      <td>  9</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 433,
       "text": [
        "  Journal Abbreviation Frequency\n",
        "0       J Stud Alcohol        18\n",
        "1    School Nurse News        10\n",
        "2             Oncogene        26\n",
        "3        Ecotoxicology         8\n",
        "4    J Basic Microbiol         9"
       ]
      }
     ],
     "prompt_number": 433
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data11 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev11 = []\n",
      "for i in range(len(data11)-1):\n",
      "    x = data11[i]['journal']['medlineta']\n",
      "    abbrev11.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 269
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res= Counter(abbrev11)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()\n",
      "\n",
      "df11 = pd.DataFrame(data=[c1,c2])\n",
      "df11 = df11.T\n",
      "df11 = df11.rename(columns={0:'Journal Abbreviation', 1: 'Frequency'})\n",
      "df11.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>                J Immunol Methods</td>\n",
        "      <td> 21</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>                    Indian J Lepr</td>\n",
        "      <td>  5</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td>                Bull Am Coll Surg</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>                  Qual Health Res</td>\n",
        "      <td> 13</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td> High Blood Press Cardiovasc Prev</td>\n",
        "      <td> 16</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 434,
       "text": [
        "               Journal Abbreviation Frequency\n",
        "0                 J Immunol Methods        21\n",
        "1                     Indian J Lepr         5\n",
        "2                 Bull Am Coll Surg         6\n",
        "3                   Qual Health Res        13\n",
        "4  High Blood Press Cardiovasc Prev        16"
       ]
      }
     ],
     "prompt_number": 434
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Data12 - Obtain eigenfactors"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "***"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "abbrev12 = []\n",
      "for i in range(len(data12)-1):\n",
      "    x = data12[i]['journal']['medlineta']\n",
      "    abbrev12.append(str(x))"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 435
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "res = Counter(abbrev12)\n",
      "c1 = res.keys()\n",
      "c2 = res.values()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 436
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df12 = pd.DataFrame(data=[c1,c2])\n",
      "df12 = df12.T\n",
      "df12 = df12.rename(columns={0:'Journal Abbreviation', 1: 'Frequency'})\n",
      "df12.head()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>0</th>\n",
        "      <td>        Oncogene</td>\n",
        "      <td> 19</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>1</th>\n",
        "      <td>    EMBO Mol Med</td>\n",
        "      <td>  6</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>2</th>\n",
        "      <td> Rev Invest Clin</td>\n",
        "      <td> 15</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>3</th>\n",
        "      <td>        ED Manag</td>\n",
        "      <td>  4</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>4</th>\n",
        "      <td>   Ecotoxicology</td>\n",
        "      <td> 29</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 437,
       "text": [
        "  Journal Abbreviation Frequency\n",
        "0             Oncogene        19\n",
        "1         EMBO Mol Med         6\n",
        "2      Rev Invest Clin        15\n",
        "3             ED Manag         4\n",
        "4        Ecotoxicology        29"
       ]
      }
     ],
     "prompt_number": 437
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Merge the 12 dataframes\n",
      "cd = pd.concat([df, df2])"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 339
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "print len(cd)\n",
      "print len(df)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "42\n",
        "16\n"
       ]
      }
     ],
     "prompt_number": 352
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "(df['Journal Abbreviation'] == df2['Journal Abbreviation']).any()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "ename": "ValueError",
       "evalue": "Series lengths must match to compare",
       "output_type": "pyerr",
       "traceback": [
        "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
        "\u001b[0;32m<ipython-input-332-25e8038a9288>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Journal Abbreviation'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mdf2\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Journal Abbreviation'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
        "\u001b[0;32m//anaconda/lib/python2.7/site-packages/pandas/core/ops.pyc\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    541\u001b[0m             \u001b[0mname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_maybe_match_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    542\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 543\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Series lengths must match to compare'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    544\u001b[0m             return self._constructor(na_op(self.values, other.values),\n\u001b[1;32m    545\u001b[0m                                      index=self.index, name=name)\n",
        "\u001b[0;31mValueError\u001b[0m: Series lengths must match to compare"
       ]
      }
     ],
     "prompt_number": 332
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "new = cd.groupby(['Journal Abbreviation']).sum()\n",
      "len(new)\n",
      "# dataframe new contains the count of journals for datasets 1 and 2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 353,
       "text": [
        "33"
       ]
      }
     ],
     "prompt_number": 353
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "print new"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "<pandas.core.groupby.DataFrameGroupBy object at 0x16edc0ed0>\n"
       ]
      }
     ],
     "prompt_number": 343
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Summary Tables"
     ]
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "**medlineta**: NLM standard abbreviation for journal titles"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "data11[0]['authors']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 445,
       "text": [
        "[{u'affiliation': u'Research Center Aarslev, Department of Food Science, Faculty of Agricultural Sciences, University of Aarhus, Kirstinebjergvej 10, DK-5792 Aarslev, Denmark.',\n",
        "  u'forename': u'Lars P',\n",
        "  u'initials': u'LP',\n",
        "  u'lastname': u'Christensen'}]"
       ]
      }
     ],
     "prompt_number": 445
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "data12[0]['journal']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 442,
       "text": [
        "{u'country': u'United States',\n",
        " u'issnlinking': u'1526-9523',\n",
        " u'medlineta': u'J Midwifery Womens Health',\n",
        " u'nlmuniqueid': u'100909407'}"
       ]
      }
     ],
     "prompt_number": 442
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# concatenation of each individual dataset\n",
      "master_df = pd.concat([df,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12])\n",
      "master_df.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>count</th>\n",
        "      <td>     13473</td>\n",
        "      <td> 13473</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>unique</th>\n",
        "      <td>      6728</td>\n",
        "      <td>   260</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>top</th>\n",
        "      <td> Biochem J</td>\n",
        "      <td>     1</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>freq</th>\n",
        "      <td>        11</td>\n",
        "      <td>   876</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 438,
       "text": [
        "       Journal Abbreviation  Frequency\n",
        "count                 13473      13473\n",
        "unique                 6728        260\n",
        "top               Biochem J          1\n",
        "freq                     11        876"
       ]
      }
     ],
     "prompt_number": 438
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "df_frequency = master_df.groupby(['Journal Abbreviation']).sum()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 448
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "print \"Summary table of Journal Frequency\"\n",
      "df_frequency.Frequency.describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Summary table of Journal Frequency\n"
       ]
      },
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 451,
       "text": [
        "count     6728.000000\n",
        "mean        53.507729\n",
        "std        454.886445\n",
        "min          1.000000\n",
        "25%          8.000000\n",
        "50%         18.000000\n",
        "75%         43.000000\n",
        "max      26522.000000\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 451
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "type(df_frequency)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 452,
       "text": [
        "pandas.core.frame.DataFrame"
       ]
      }
     ],
     "prompt_number": 452
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in df_frequency:\n",
      "    print df_frequency[i]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Journal Abbreviation\n",
        "1199 News                   4\n",
        "AANA J                     16\n",
        "AAOHN J                    30\n",
        "AARN News Lett              3\n",
        "ACP J Club                  1\n",
        "ACS Comb Sci               18\n",
        "ADM                         8\n",
        "AIA J                       3\n",
        "AIDS                      133\n",
        "AIDS Alert                 13\n",
        "AIDS Care                  34\n",
        "AIDS Educ Prev              8\n",
        "AIDS Patient Care          56\n",
        "AIDS Patient Care STDS     13\n",
        "AIDS Res                   18\n",
        "...\n",
        "Zhonghua Wei Chang Wai Ke Za Zhi       32\n",
        "Zhonghua Xue Ye Xue Za Zhi             62\n",
        "Zhonghua Yan Ke Za Zhi                 24\n",
        "Zhonghua Yi Xue Yi Chuan Xue Za Zhi    17\n",
        "Zhonghua Yi Xue Za Zhi                 12\n",
        "Zhonghua Yi Xue Za Zhi (Taipei)        26\n",
        "Zhonghua Yu Fang Yi Xue Za Zhi         23\n",
        "Zhonghua Zheng Xing Wai Ke Za Zhi      33\n",
        "Zhonghua Zhong Liu Za Zhi              70\n",
        "Ziekenhuiswezen                        12\n",
        "Zobozdrav Vestn                        21\n",
        "Zoolog Sci                             17\n",
        "Zoonoses Public Health                 10\n",
        "Zoonoses Res                            2\n",
        "Zygote                                  9\n",
        "Name: Frequency, Length: 6728, dtype: int64\n"
       ]
      }
     ],
     "prompt_number": 454
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "for i in range(len(df_frequency)):\n",
      "    print "
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Table: Frequency of Journals"
     ]
    },
    {
     "cell_type": "heading",
     "level": 4,
     "metadata": {},
     "source": [
      "Table: Frequency of (Last?) Authorships"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": true,
     "input": [
      "# Export table in Ipython as CSV"
     ],
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_frequency['Frequency'].describe()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 460,
       "text": [
        "count     6728.000000\n",
        "mean        53.507729\n",
        "std        454.886445\n",
        "min          1.000000\n",
        "25%          8.000000\n",
        "50%         18.000000\n",
        "75%         43.000000\n",
        "max      26522.000000\n",
        "dtype: float64"
       ]
      }
     ],
     "prompt_number": 460
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "df_frequency[df_frequency.Frequency > 100]"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "html": [
        "<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n",
        "<table border=\"1\" class=\"dataframe\">\n",
        "  <thead>\n",
        "    <tr style=\"text-align: right;\">\n",
        "      <th></th>\n",
        "      <th>Frequency</th>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Journal Abbreviation</th>\n",
        "      <th></th>\n",
        "    </tr>\n",
        "  </thead>\n",
        "  <tbody>\n",
        "    <tr>\n",
        "      <th>AIDS</th>\n",
        "      <td>  133</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>AJNR Am J Neuroradiol</th>\n",
        "      <td>  124</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>AJR Am J Roentgenol</th>\n",
        "      <td>  114</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>ASAIO J</th>\n",
        "      <td>  188</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Acta Crystallogr Sect E Struct Rep Online</th>\n",
        "      <td> 3301</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Acta Derm Venereol</th>\n",
        "      <td>  139</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Acta Paediatr</th>\n",
        "      <td>  236</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Acta Physiol Scand</th>\n",
        "      <td>  128</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Acta Radiol Diagn (Stockh)</th>\n",
        "      <td>  115</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Acta Univ Carol Med Monogr</th>\n",
        "      <td>  111</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Adv Exp Med Biol</th>\n",
        "      <td>  431</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Adv Neurol</th>\n",
        "      <td>  125</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Adv Prostaglandin Thromboxane Res</th>\n",
        "      <td>  115</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Akush Ginekol (Mosk)</th>\n",
        "      <td>  184</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am Fam Physician</th>\n",
        "      <td>  152</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am Heart J</th>\n",
        "      <td>  251</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Bot</th>\n",
        "      <td>  151</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Cardiol</th>\n",
        "      <td>  302</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Clin Pathol</th>\n",
        "      <td>  167</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Dermatopathol</th>\n",
        "      <td>  117</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Dis Child</th>\n",
        "      <td>  121</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Epidemiol</th>\n",
        "      <td>  120</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Gastroenterol</th>\n",
        "      <td>  172</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Health Syst Pharm</th>\n",
        "      <td>  112</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Ind Med</th>\n",
        "      <td>  115</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Med</th>\n",
        "      <td>  254</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Med Genet</th>\n",
        "      <td>  167</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Med Genet A</th>\n",
        "      <td>  111</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Nurs</th>\n",
        "      <td>  113</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Am J Obstet Gynecol</th>\n",
        "      <td>  274</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>...</th>\n",
        "      <td>...</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vnitr Lek</th>\n",
        "      <td>  118</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Voen Med Zh</th>\n",
        "      <td>  312</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vopr Kurortol Fizioter Lech Fiz Kult</th>\n",
        "      <td>  165</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vopr Med Khim</th>\n",
        "      <td>  119</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vopr Okhr Materin Det</th>\n",
        "      <td>  129</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vopr Onkol</th>\n",
        "      <td>  233</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vopr Pitan</th>\n",
        "      <td>  140</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vopr Virusol</th>\n",
        "      <td>  144</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vox Sang</th>\n",
        "      <td>  116</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Vrach Delo</th>\n",
        "      <td>  382</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Waste Manag</th>\n",
        "      <td>  166</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Water Sci Technol</th>\n",
        "      <td>  120</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>West J Med</th>\n",
        "      <td>  143</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Wiad Lek</th>\n",
        "      <td>  133</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Wien Klin Wochenschr</th>\n",
        "      <td>  143</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Wien Med Wochenschr</th>\n",
        "      <td>  122</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>World J Gastroenterol</th>\n",
        "      <td>  153</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>World J Surg</th>\n",
        "      <td>  170</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Yakugaku Zasshi</th>\n",
        "      <td>  125</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Z Arztl Fortbild (Jena)</th>\n",
        "      <td>  113</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Z Gastroenterol</th>\n",
        "      <td>  121</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Z Kardiol</th>\n",
        "      <td>  125</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zentralbl Bakteriol Orig A</th>\n",
        "      <td>  277</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zentralbl Gynakol</th>\n",
        "      <td>  141</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zh Eksp Klin Med</th>\n",
        "      <td>  102</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zh Mikrobiol Epidemiol Immunobiol</th>\n",
        "      <td>  187</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zh Nevropatol Psikhiatr Im S S Korsakova</th>\n",
        "      <td>  160</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zh Vyssh Nerv Deiat Im I P Pavlova</th>\n",
        "      <td>  129</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zhongguo Fei Ai Za Zhi</th>\n",
        "      <td>  192</td>\n",
        "    </tr>\n",
        "    <tr>\n",
        "      <th>Zhongguo Ying Yong Sheng Li Xue Za Zhi</th>\n",
        "      <td>  175</td>\n",
        "    </tr>\n",
        "  </tbody>\n",
        "</table>\n",
        "<p>619 rows \u00d7 1 columns</p>\n",
        "</div>"
       ],
       "metadata": {},
       "output_type": "pyout",
       "prompt_number": 459,
       "text": [
        "                                           Frequency\n",
        "Journal Abbreviation                                \n",
        "AIDS                                             133\n",
        "AJNR Am J Neuroradiol                            124\n",
        "AJR Am J Roentgenol                              114\n",
        "ASAIO J                                          188\n",
        "Acta Crystallogr Sect E Struct Rep Online       3301\n",
        "Acta Derm Venereol                               139\n",
        "Acta Paediatr                                    236\n",
        "Acta Physiol Scand                               128\n",
        "Acta Radiol Diagn (Stockh)                       115\n",
        "Acta Univ Carol Med Monogr                       111\n",
        "Adv Exp Med Biol                                 431\n",
        "Adv Neurol                                       125\n",
        "Adv Prostaglandin Thromboxane Res                115\n",
        "Akush Ginekol (Mosk)                             184\n",
        "Am Fam Physician                                 152\n",
        "Am Heart J                                       251\n",
        "Am J Bot                                         151\n",
        "Am J Cardiol                                     302\n",
        "Am J Clin Pathol                                 167\n",
        "Am J Dermatopathol                               117\n",
        "Am J Dis Child                                   121\n",
        "Am J Epidemiol                                   120\n",
        "Am J Gastroenterol                               172\n",
        "Am J Health Syst Pharm                           112\n",
        "Am J Ind Med                                     115\n",
        "Am J Med                                         254\n",
        "Am J Med Genet                                   167\n",
        "Am J Med Genet A                                 111\n",
        "Am J Nurs                                        113\n",
        "Am J Obstet Gynecol                              274\n",
        "...                                              ...\n",
        "Vnitr Lek                                        118\n",
        "Voen Med Zh                                      312\n",
        "Vopr Kurortol Fizioter Lech Fiz Kult             165\n",
        "Vopr Med Khim                                    119\n",
        "Vopr Okhr Materin Det                            129\n",
        "Vopr Onkol                                       233\n",
        "Vopr Pitan                                       140\n",
        "Vopr Virusol                                     144\n",
        "Vox Sang                                         116\n",
        "Vrach Delo                                       382\n",
        "Waste Manag                                      166\n",
        "Water Sci Technol                                120\n",
        "West J Med                                       143\n",
        "Wiad Lek                                         133\n",
        "Wien Klin Wochenschr                             143\n",
        "Wien Med Wochenschr                              122\n",
        "World J Gastroenterol                            153\n",
        "World J Surg                                     170\n",
        "Yakugaku Zasshi                                  125\n",
        "Z Arztl Fortbild (Jena)                          113\n",
        "Z Gastroenterol                                  121\n",
        "Z Kardiol                                        125\n",
        "Zentralbl Bakteriol Orig A                       277\n",
        "Zentralbl Gynakol                                141\n",
        "Zh Eksp Klin Med                                 102\n",
        "Zh Mikrobiol Epidemiol Immunobiol                187\n",
        "Zh Nevropatol Psikhiatr Im S S Korsakova         160\n",
        "Zh Vyssh Nerv Deiat Im I P Pavlova               129\n",
        "Zhongguo Fei Ai Za Zhi                           192\n",
        "Zhongguo Ying Yong Sheng Li Xue Za Zhi           175\n",
        "\n",
        "[619 rows x 1 columns]"
       ]
      }
     ],
     "prompt_number": 459
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
